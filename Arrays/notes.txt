Array Data structure

An array is a linear data structure that stores a fixed-size sequence of elements of the same type.
Each element in the array is identified by its index or position.

Key points to remember:
- Array elements are stored in contiguous memory locations. This allows for efficient access to 
elements using their indices.
- Array indices start from 0. The first element is accessed using index 0, the second element with 
index 1, and so on.
- Arrays store elements of the same data type.(Homogenous elements)
- Arrays have a fixed size, meaning the number of elements they can hold is determined during their 
creation.

Types of indexing in an array: 
0 (zero-based indexing): The first element of the array starts from 0.
1 (one-based indexing): The first element of the array starts from 1.
n (N-based indexing): The base index of an array can be freely chosen.


Array initialization refers to the process of assigning initial values to the elements of an array. 
Ways to initialize an array:

1. Initializing with Values:
   - You can initialize an array by explicitly providing values for each element within curly braces 
     '{}' or square brackets '[]'.
   - For example, in Java, you can initialize an array of integers as follows: 
     int[] arr = {1, 2, 3, 4, 5};
   - The number of values provided should match the size of the array, and the elements are assigned 
     in the order of their appearance.

2. Initializing with a Default Value:
   - Some programming languages allow initializing an array with a default value for all elements.
   - For instance, in Python, you can initialize an array of a specified size with a default value 
     using the '*' operator and the 'list()' function.
   - Example: 'arr = [0] * 5' initializes an array with 5 elements, and each element is set to the 
     default value of 0.

3. Initializing with a Range or Sequence:
   - In certain programming languages, you can initialize an array with a range of values or a 
     sequence.
   - For instance, in Python, you can use the 'range()' function within the 'list()' function to 
     create an array with a sequence of numbers.
   - Example: 'arr = list(range(1, 6))' initializes an array with the sequence '[1, 2, 3, 4, 5]'.

4. Dynamic Initialization:
   - In some cases, you may initialize an array dynamically during runtime based on user input or 
     other factors.
   - This involves creating an array with a specified size and then assigning values to each element 
     using loops or other operations.


Operations:
- Accessing an element: accessing an element at a specified index
- Sorting the elements: using sorting algorithms like quicksort or mergesort
- Searching the elements: using searching algorithms like linear search or binary search
- Inserting an element: inserting an element at the end of the array or at a specified index
- Deleting an element: deleting an element from the end of the array or from a specified index
 


1-D Array:

- A 1-D array is a collection of elements of the same data type arranged in a linear fashion.
- Each element in the array is accessed using its index.
- The index of the first element is 0, the second element is 1, and so on.

Syntax of 1-D array declaration:
datatype arrayName[size];

Example:
int[] arr = new int[5];



2-D Array:

- A 2-D array is a collection of elements of the same data type arranged in a matrix-like format.
- Each element in the array is accessed using its row and column index.
- The index of the first element of the array is (0, 0), the second element is (0, 1), and so on.

Syntax of 2-D array declaration:
datatype[][] arrayName = new datatype[rows][columns];

Example:
int[][] arr = new int[3][4];




Multi-dimensional Array:

- A multi-dimensional array is a collection of elements of the same data type arranged in a
matrix-like format with more than two dimensions.
- Each element in the array is accessed using its indices.
- The index of the first element of the array is (0, 0, 0), the second element is (0, 0, 1), and so on.

Syntax of multi-dimensional array declaration:
datatype[][]...[] arrayName = new datatype[dimension1][dimension2]...[dimensionN];

Example:
int[][][] arr = new int[3][4][2];



Linear Search:
- Linear search is a searching algorithm that searches for an element in an array by sequentially.
- Linear search is also known as sequential search.
- Linear search is a brute-force search algorithm.
- Linear search has a time complexity of O(n), where n is the number of elements in the array.

Binary Search:
- Binary search is a searching algorithm that searches for an element in a sorted array by
repeatedly dividing the search interval in half.
- Binary search is also known as half-interval search or logarithmic search.
- Binary search has a time complexity of O(log n), where n is the number of elements in the array.
- Binary search can be implemented using both iterative and recursive approaches.



Vectors:
- A vector is a dynamic array that can grow or shrink in size.
- It is similar to an array, except that it is resizable.
- Vectors are also known as dynamic arrays or ArrayLists.
- Vectors are implemented using arrays.
- Vectors are useful when you don't know the number of elements in advance or when you want to add
or remove elements from the vector.

Syntax of vector declaration:
Vector<datatype> vectorName = new Vector<datatype>();

Example:
Vector<Integer> vector = new Vector<Integer>();

Functions in vector:
- begin()- Returns an iterator pointing to the first element in the vector.
- end()- Returns an iterator pointing to the theoretical element that follows the last element in the vector.
- size()- Returns the number of elements in the vector.
- capacity()- Returns the size of the storage space currently allocated to the vector expressed as number of elements.
- max_size()- Returns the maximum number of elements that the vector can hold.
- empty()- Returns whether the vector is empty.
- push_back()- Adds a new element at the end of the vector, after its current last element.
- pop_back()- Removes the last element in the vector, effectively reducing the container size by one.
- insert()- Inserts new elements into the vector at a specified position.
- erase()- Removes elements from the vector at a specified position or range.
- swap()- Swaps the contents of one vector with another vector of the same type. Sizes may differ.
- clear()- Removes all the elements from the vector, leaving the container with a size of 0.
- emplace()- Inserts a new element into the vector directly before a specified position.
- emplace_back()- Adds a new element at the end of the vector, after its current last element.
- front()- Returns a reference to the first element in the vector.
- back()- Returns a reference to the last element in the vector.
